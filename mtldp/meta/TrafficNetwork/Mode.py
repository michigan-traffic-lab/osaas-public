from enum import Enum


class MapMode(Enum):
    """
    Mode selection for parsing the OpenStreetMap data :func:`cores.mtlmap.build_network_from_xml`.

    See :ref:`map parsing flowchart <map_mode>` for more information.

    The mode in the lower row (more accurate mode) generate more layers than that of upper row, which means
    that it will also generate the layers that can be generated by the mode in the upper row.

    +----------------------+--------------------------------------+--------------------------------------------------------+
    | Mode                 | Output layers                        | Applications                                           |
    +======================+======================================+========================================================+
    | ``.MAP_MATCHING``    | ``Segment``, ``Node``, ``OsmWay``    | Trajectory data map matching                           |
    +----------------------+--------------------------------------+--------------------------------------------------------+
    | ``.ACCURATE``        | ``Link``, ``Segment``                | Split trajectory into movements                        |
    +----------------------+--------------------------------------+--------------------------------------------------------+
    | ``.ROUGH``           | ``LaneSet``, ``ConflictPoint``       | Build CTM model, etc.                                  |
    +----------------------+--------------------------------------+--------------------------------------------------------+

    """
    MAP_MATCHING = 0
    ACCURATE = 1
    ROUGH = 2


class GraphMode(Enum):
    """
    Mode selection for generating the NetworkX graph object class:`cores.mtlmap.Network.build_networkx_graph`.

    +----------------------+-----------------------------------------------------------------------------------------------------------------------------+
    | Mode                 | Method                                                                                                                      |
    +======================+=============================================================================================================================+
    | ``.LINK``            | Convert each intersection to a node while convert each link to an edge                                                      |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------+
    | ``.SEGMENT``         | Convert non-ordinary node (intersection, segment connection) to a node and each segment to an edge                          |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------+
    | ``.LANESET``         | Convert each laneset to a node and the edge inherit the properties of the downstream laneset                                |
    +----------------------+-----------------------------------------------------------------------------------------------------------------------------+

    """
    LINK = 0
    SEGMENT = 1
    LANESET = 2
